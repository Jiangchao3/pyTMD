# This workflow will install Python dependencies and update the time and EOP files

name: Auto-Update Files

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 0 1 * *'

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      env:
        JOBS: 2
        PROJ_VERSION: 8.0.1
        PROJ_DATUMGRID_VERSION: 1.8
        PROJ_NETWORK: ON
        SQLITE3_CFLAGS: "-I/usr/local/include"
        SQLITE3_LIBS: "-L/usr/local/lib -lsqlite3"
      run: |
        sudo apt-get update
        sudo apt-get install gdal-bin libgdal-dev libgeos-dev
        sudo apt-get install libhdf5-dev libnetcdf-dev octave
        cd ${RUNNER_TEMP}
        wget -q https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz
        wget -q http://download.osgeo.org/proj/proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip
        tar -xzf proj-${PROJ_VERSION}.tar.gz
        unzip proj-datumgrid-${PROJ_DATUMGRID_VERSION}.zip -d proj-${PROJ_VERSION}/data/
        cd proj-${PROJ_VERSION}
        mkdir build
        cd build
        sudo cmake \
            -DPYTHON_EXECUTABLE=/usr/local/bin/python3 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=true \
            -DCMAKE_INSTALL_PREFIX=/usr/local/ ..
        sudo cmake --build .
        sudo make --quiet --jobs=${JOBS}
        sudo make --quiet install
        make clean
        cd ${GITHUB_WORKSPACE}
        sudo ldconfig --verbose
        sudo projsync --system-directory --all
        pip install --upgrade pip
        pip install numpy
        pip install zarr
        pip install pandas
        pip install scikit-learn
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
        pip install .
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    - name: Test with pytest
      run: |
        pytest test/test_leap_seconds.py test/test_time.py test/test_eop.py \
            --username=${{ secrets.EARTHDATA_USERNAME }} \
            --password=${{ secrets.EARTHDATA_PASSWORD }}
    - name: Check for changes
      id: changes
      run: |
        if [ -n "$(git status --porcelain)" ] ; then
            echo "::set-output name=detected::true";
            echo "::debug::Changes detected";
        else
            echo "::set-output name=detected::false";
            echo "::debug::No changes detected";
        fi
    - name: Create pull request
      if: steps.changes.outputs.detected == 'true'
      uses: peter-evans/create-pull-request@v3
      with:
        assignees: ${{ github.actor }}
        title: "data: automatic time updates"
